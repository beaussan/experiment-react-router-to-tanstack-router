/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LayoutImport } from './routes/_layout'
import { Route as LayoutIndexImport } from './routes/_layout/index'
import { Route as LayoutAppImport } from './routes/_layout/_app'
import { Route as LayoutAppModernImport } from './routes/_layout/_app/modern'
import { Route as LayoutAppLegacyImport } from './routes/_layout/_app/legacy'

// Create/Update Routes

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const LayoutIndexRoute = LayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutAppRoute = LayoutAppImport.update({
  id: '/_app',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutAppModernRoute = LayoutAppModernImport.update({
  id: '/modern',
  path: '/modern',
  getParentRoute: () => LayoutAppRoute,
} as any)

const LayoutAppLegacyRoute = LayoutAppLegacyImport.update({
  id: '/legacy',
  path: '/legacy',
  getParentRoute: () => LayoutAppRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/_layout/_app': {
      id: '/_layout/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutAppImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/_app/legacy': {
      id: '/_layout/_app/legacy'
      path: '/legacy'
      fullPath: '/legacy'
      preLoaderRoute: typeof LayoutAppLegacyImport
      parentRoute: typeof LayoutAppImport
    }
    '/_layout/_app/modern': {
      id: '/_layout/_app/modern'
      path: '/modern'
      fullPath: '/modern'
      preLoaderRoute: typeof LayoutAppModernImport
      parentRoute: typeof LayoutAppImport
    }
  }
}

// Create and export the route tree

interface LayoutAppRouteChildren {
  LayoutAppLegacyRoute: typeof LayoutAppLegacyRoute
  LayoutAppModernRoute: typeof LayoutAppModernRoute
}

const LayoutAppRouteChildren: LayoutAppRouteChildren = {
  LayoutAppLegacyRoute: LayoutAppLegacyRoute,
  LayoutAppModernRoute: LayoutAppModernRoute,
}

const LayoutAppRouteWithChildren = LayoutAppRoute._addFileChildren(
  LayoutAppRouteChildren,
)

interface LayoutRouteChildren {
  LayoutAppRoute: typeof LayoutAppRouteWithChildren
  LayoutIndexRoute: typeof LayoutIndexRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutAppRoute: LayoutAppRouteWithChildren,
  LayoutIndexRoute: LayoutIndexRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof LayoutAppRouteWithChildren
  '/': typeof LayoutIndexRoute
  '/legacy': typeof LayoutAppLegacyRoute
  '/modern': typeof LayoutAppModernRoute
}

export interface FileRoutesByTo {
  '': typeof LayoutAppRouteWithChildren
  '/': typeof LayoutIndexRoute
  '/legacy': typeof LayoutAppLegacyRoute
  '/modern': typeof LayoutAppModernRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/_layout/_app': typeof LayoutAppRouteWithChildren
  '/_layout/': typeof LayoutIndexRoute
  '/_layout/_app/legacy': typeof LayoutAppLegacyRoute
  '/_layout/_app/modern': typeof LayoutAppModernRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/' | '/legacy' | '/modern'
  fileRoutesByTo: FileRoutesByTo
  to: '' | '/' | '/legacy' | '/modern'
  id:
    | '__root__'
    | '/_layout'
    | '/_layout/_app'
    | '/_layout/'
    | '/_layout/_app/legacy'
    | '/_layout/_app/modern'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/_app",
        "/_layout/"
      ]
    },
    "/_layout/_app": {
      "filePath": "_layout/_app.tsx",
      "parent": "/_layout",
      "children": [
        "/_layout/_app/legacy",
        "/_layout/_app/modern"
      ]
    },
    "/_layout/": {
      "filePath": "_layout/index.tsx",
      "parent": "/_layout"
    },
    "/_layout/_app/legacy": {
      "filePath": "_layout/_app/legacy.tsx",
      "parent": "/_layout/_app"
    },
    "/_layout/_app/modern": {
      "filePath": "_layout/_app/modern.tsx",
      "parent": "/_layout/_app"
    }
  }
}
ROUTE_MANIFEST_END */
