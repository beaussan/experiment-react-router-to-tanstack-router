/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LayoutImport } from './routes/_layout'
import { Route as SplatImport } from './routes/$'
import { Route as LayoutIndexImport } from './routes/_layout/index'
import { Route as LayoutHowImport } from './routes/_layout/how'
import { Route as LayoutAppImport } from './routes/_layout/_app'
import { Route as LayoutAppTwoImport } from './routes/_layout/_app/two'
import { Route as LayoutAppOneImport } from './routes/_layout/_app/one'

// Create/Update Routes

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const SplatRoute = SplatImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => rootRoute,
} as any)

const LayoutIndexRoute = LayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutHowRoute = LayoutHowImport.update({
  id: '/how',
  path: '/how',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutAppRoute = LayoutAppImport.update({
  id: '/_app',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutAppTwoRoute = LayoutAppTwoImport.update({
  id: '/two',
  path: '/two',
  getParentRoute: () => LayoutAppRoute,
} as any)

const LayoutAppOneRoute = LayoutAppOneImport.update({
  id: '/one',
  path: '/one',
  getParentRoute: () => LayoutAppRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/$': {
      id: '/$'
      path: '/$'
      fullPath: '/$'
      preLoaderRoute: typeof SplatImport
      parentRoute: typeof rootRoute
    }
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/_layout/_app': {
      id: '/_layout/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutAppImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/how': {
      id: '/_layout/how'
      path: '/how'
      fullPath: '/how'
      preLoaderRoute: typeof LayoutHowImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/_app/one': {
      id: '/_layout/_app/one'
      path: '/one'
      fullPath: '/one'
      preLoaderRoute: typeof LayoutAppOneImport
      parentRoute: typeof LayoutAppImport
    }
    '/_layout/_app/two': {
      id: '/_layout/_app/two'
      path: '/two'
      fullPath: '/two'
      preLoaderRoute: typeof LayoutAppTwoImport
      parentRoute: typeof LayoutAppImport
    }
  }
}

// Create and export the route tree

interface LayoutAppRouteChildren {
  LayoutAppOneRoute: typeof LayoutAppOneRoute
  LayoutAppTwoRoute: typeof LayoutAppTwoRoute
}

const LayoutAppRouteChildren: LayoutAppRouteChildren = {
  LayoutAppOneRoute: LayoutAppOneRoute,
  LayoutAppTwoRoute: LayoutAppTwoRoute,
}

const LayoutAppRouteWithChildren = LayoutAppRoute._addFileChildren(
  LayoutAppRouteChildren,
)

interface LayoutRouteChildren {
  LayoutAppRoute: typeof LayoutAppRouteWithChildren
  LayoutHowRoute: typeof LayoutHowRoute
  LayoutIndexRoute: typeof LayoutIndexRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutAppRoute: LayoutAppRouteWithChildren,
  LayoutHowRoute: LayoutHowRoute,
  LayoutIndexRoute: LayoutIndexRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

export interface FileRoutesByFullPath {
  '/$': typeof SplatRoute
  '': typeof LayoutAppRouteWithChildren
  '/how': typeof LayoutHowRoute
  '/': typeof LayoutIndexRoute
  '/one': typeof LayoutAppOneRoute
  '/two': typeof LayoutAppTwoRoute
}

export interface FileRoutesByTo {
  '/$': typeof SplatRoute
  '': typeof LayoutAppRouteWithChildren
  '/how': typeof LayoutHowRoute
  '/': typeof LayoutIndexRoute
  '/one': typeof LayoutAppOneRoute
  '/two': typeof LayoutAppTwoRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/$': typeof SplatRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/_layout/_app': typeof LayoutAppRouteWithChildren
  '/_layout/how': typeof LayoutHowRoute
  '/_layout/': typeof LayoutIndexRoute
  '/_layout/_app/one': typeof LayoutAppOneRoute
  '/_layout/_app/two': typeof LayoutAppTwoRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/$' | '' | '/how' | '/' | '/one' | '/two'
  fileRoutesByTo: FileRoutesByTo
  to: '/$' | '' | '/how' | '/' | '/one' | '/two'
  id:
    | '__root__'
    | '/$'
    | '/_layout'
    | '/_layout/_app'
    | '/_layout/how'
    | '/_layout/'
    | '/_layout/_app/one'
    | '/_layout/_app/two'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  SplatRoute: typeof SplatRoute
  LayoutRoute: typeof LayoutRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  SplatRoute: SplatRoute,
  LayoutRoute: LayoutRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/$",
        "/_layout"
      ]
    },
    "/$": {
      "filePath": "$.tsx"
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/_app",
        "/_layout/how",
        "/_layout/"
      ]
    },
    "/_layout/_app": {
      "filePath": "_layout/_app.tsx",
      "parent": "/_layout",
      "children": [
        "/_layout/_app/one",
        "/_layout/_app/two"
      ]
    },
    "/_layout/how": {
      "filePath": "_layout/how.tsx",
      "parent": "/_layout"
    },
    "/_layout/": {
      "filePath": "_layout/index.tsx",
      "parent": "/_layout"
    },
    "/_layout/_app/one": {
      "filePath": "_layout/_app/one.tsx",
      "parent": "/_layout/_app"
    },
    "/_layout/_app/two": {
      "filePath": "_layout/_app/two.tsx",
      "parent": "/_layout/_app"
    }
  }
}
ROUTE_MANIFEST_END */
